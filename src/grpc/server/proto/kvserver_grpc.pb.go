// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: kvserver.proto

package kvserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KVServerClient is the client API for KVServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVServerClient interface {
	ClearSession(ctx context.Context, in *ClearSessionRequest, opts ...grpc.CallOption) (*ClearSessionReply, error)
	OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
}

type kVServerClient struct {
	cc grpc.ClientConnInterface
}

func NewKVServerClient(cc grpc.ClientConnInterface) KVServerClient {
	return &kVServerClient{cc}
}

func (c *kVServerClient) ClearSession(ctx context.Context, in *ClearSessionRequest, opts ...grpc.CallOption) (*ClearSessionReply, error) {
	out := new(ClearSessionReply)
	err := c.cc.Invoke(ctx, "/KVServer/ClearSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServerClient) OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionReply, error) {
	out := new(OpenSessionReply)
	err := c.cc.Invoke(ctx, "/KVServer/OpenSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/KVServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/KVServer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVServerServer is the server API for KVServer service.
// All implementations must embed UnimplementedKVServerServer
// for forward compatibility
type KVServerServer interface {
	ClearSession(context.Context, *ClearSessionRequest) (*ClearSessionReply, error)
	OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
	mustEmbedUnimplementedKVServerServer()
}

// UnimplementedKVServerServer must be embedded to have forward compatible implementations.
type UnimplementedKVServerServer struct {
}

func (UnimplementedKVServerServer) ClearSession(context.Context, *ClearSessionRequest) (*ClearSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSession not implemented")
}
func (UnimplementedKVServerServer) OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSession not implemented")
}
func (UnimplementedKVServerServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKVServerServer) Update(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKVServerServer) mustEmbedUnimplementedKVServerServer() {}

// UnsafeKVServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVServerServer will
// result in compilation errors.
type UnsafeKVServerServer interface {
	mustEmbedUnimplementedKVServerServer()
}

func RegisterKVServerServer(s grpc.ServiceRegistrar, srv KVServerServer) {
	s.RegisterService(&KVServer_ServiceDesc, srv)
}

func _KVServer_ClearSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).ClearSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KVServer/ClearSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).ClearSession(ctx, req.(*ClearSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVServer_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KVServer/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).OpenSession(ctx, req.(*OpenSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KVServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KVServer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KVServer_ServiceDesc is the grpc.ServiceDesc for KVServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KVServer",
	HandlerType: (*KVServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearSession",
			Handler:    _KVServer_ClearSession_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _KVServer_OpenSession_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KVServer_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _KVServer_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvserver.proto",
}
